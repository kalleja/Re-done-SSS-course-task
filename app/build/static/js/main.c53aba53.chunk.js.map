{"version":3,"sources":["redux/lib.js","redux/actionTypes.js","services/ApiService.js","services/ApplicationService.js","services/WebSocketService.js","redux/reducers/user.js","redux/reducers/quiz.js","redux/reducers/quizList.js","redux/reducers/leaderboard.js","redux/reducers/auth.js","redux/reducers/index.js","redux/store/configureStore.js","redux/actions.js","redux/selectors.js","containers/Header.jsx","pages/Homepage.jsx","containers/QuizList.jsx","pages/Dashboard.jsx","containers/Pointsboard.jsx","pages/Pointsboard.jsx","containers/SignupForm.jsx","pages/Signup.jsx","containers/LoginForm.jsx","pages/Login.jsx","pages/About.jsx","containers/Quiz.jsx","pages/Quiz.jsx","pages/Loading.jsx","containers/Locked.jsx","containers/App.jsx","index.js","config/index.js","config/config_prod.js","config/config_dev.js"],"names":["createActionType","context","arguments","length","undefined","actionType","sep","concat","Object","toConsumableArray","map","d","toUpperCase","join","createPromiseTypes","type","TYPE","PENDING","REJECTED","FULFILLED","GET_ALL_QUIZZES","GET_LEADERBOARD","JOIN_QUIZ_REQUEST","JOIN_QUIZ_REJECT","JOIN_QUIZ_WAIT","JOIN_QUIZ_INFO","LEAVE_QUIZ_REQUEST","START_QUIZ_SUCCESS","FINISH_QUIZ_SUCCESS","LOGOUT_REQUEST","INCOMING_QUESTION","ANSWER_QUESTION_REQUEST","ANSWER_QUESTION_SUCCESS","RECEIVE_USERS_ONLINE","SOMEONE_JOINED_QUIZ","SOMEONE_LEFT_QUIZ","AUTHENTICATE_USER","JWT_AUTHENTICATION_ERROR","_apiService","endpoint","options","axios","get","data","post","_applicationService","Promise","resolve","reject","ApiService","then","response","catch","err","localStorage","getItem","removeItem","token","setItem","_this","this","removeUserToken","name","password","errors","_this2","setUserToken","MessageRecord","Record","payload","ALLOWED_WEBSOCKET_ACTION_TYPES","actionTypes","webSocketMiddleware","WebSocketService","classCallCheck","reconnectInterval","activeConnection","dispatchAction","isConnected","bind","connect","retry","dispatch","_ref","setDispatchAction","next","action","webSocketAction","send","msg","message","JSON","parse","console","log","decodeMessage","includes","msgString","stringify","objectSpread","ApplicationService","getUserToken","setActiveConnection","WebSocket","WEB_SOCKET_URL","onopen","onmessage","event","parseMessage","info","onclose","disconnect","onerror","_this3","setInterval","close","initialState","Model","UserReducer","state","withMutations","mutant","set","userAnswerModel","answerId","isCorrect","questionModel","answers","userAnswer","activeQuestionModel","questionId","question","activeQuiz","activeQuestion","activeUsers","error","waitForUsersCount","isInProgress","isFinished","isUnexpectedFinished","usersOnline","StateModel","QuizReducer","Map","fromJS","setIn","isPending","isError","QuizListReducer","forEach","item","_id","getIn","quizId","user","isAuthenticated","jwtError","combineReducers","quiz","quizList","leaderboard","auth","middleware","thunk","promiseMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","apply","actions","getQuizList","joinQuizRequest","leaveQuizRequest","logoutRequest","logout","answerQuestionRequest","params","getLeaderboard","authenticateUser","selectors","toJS","Header","_this$props","props","history","logoutAction","userName","react_default","a","createElement","rmwc","alignStart","Link","to","theme","alignEnd","unelevated","onClick","push","location","reload","icon","Component","ConnectedHeader","withRouter","Homepage","tag","use","containers_Header","className","raised","QuizList","possibleConstructorReturn","getPrototypeOf","call","handleQuizClick","assertThisInitialized","usersCount","maxUsersCount","data_table","style","minWidth","alignMiddle","colSpan","determinate","activated","values","sort","b","index","key","dense","disabled","defaultProps","mapDispatchToProps","ConnectedQuizList","Dashboard","containers_QuizList","Leaderboard","total_points","ConnectedLeaderboard","Pointsboard","ErrorRecord","InputRecord","RegisterForm","inputs","isSnackbarOpen","onSubmit","onTextFieldChange","preventDefault","register","login","setState","target","value","_this$state","method","fullwidth","placeholder","onChange","invalid","show","onHide","actionText","Signup","SignupForm","LoginForm","ConnectedQuiz","Login","containers_LoginForm","About","TIME_TO_ANSWER_QUESTION","Quiz","getAnswerIcon","handleTimerTick","handleStartTimer","handleStopTimer","handleDialogOpen","handleDialogClose","timer","isPaused","isDialogOpen","prevProps","clearInterval","interval","evt","detail","quizName","Date","open","onClose","isDefaultAction","fixedColumnWidth","align","span","primary","keys","circular_progress","size","getSeconds","answer","handleAnswerClick","color","activeUser","selected","leadingIcon","points","match","containers_Quiz","Locked","children","Loading_Signup","ConnectedLocked","App","ConnectedApp","ReactDOM","render","secondary","es","BrowserRouter","containers_App","Switch","Route","exact","path","component","containers_Locked","Redirect","document","getElementById","module","exports","require","origin","replace"],"mappings":"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","file":"static/js/main.c53aba53.chunk.js","sourcesContent":["const SEP = \"/\";\n\nexport const createActionType = (context = [], actionType = \"\", sep = SEP) =>\n    [...context.map(d => d), actionType.toUpperCase()].join(sep);\n\nexport const createPromiseTypes = (context = [], actionType = \"\", sep) => {\n    const type = createActionType(context, actionType, sep);\n\n    return {\n        TYPE: `${type}`,\n        PENDING: `${type}_PENDING`,\n        REJECTED: `${type}_REJECTED`,\n        FULFILLED: `${type}_FULFILLED`\n    };\n};\n","import { createActionType, createPromiseTypes } from \"./lib\";\n\nexport const GET_ALL_QUIZZES = createPromiseTypes([], \"GET_ALL_QUIZZES\");\nexport const GET_LEADERBOARD = createPromiseTypes([], \"GET_LEADERBOARD\");\n\nexport const JOIN_QUIZ = createActionType([], \"JOIN_QUIZ\");\nexport const JOIN_QUIZ_REQUEST = createActionType([], \"JOIN_QUIZ_REQUEST\");\nexport const JOIN_QUIZ_REJECT = createActionType([], \"JOIN_QUIZ_REJECT\");\nexport const JOIN_QUIZ_WAIT = createActionType([], \"JOIN_QUIZ_WAIT\");\nexport const JOIN_QUIZ_INFO = createActionType([], \"JOIN_QUIZ_INFO\");\nexport const LEAVE_QUIZ_REQUEST = createActionType([], \"LEAVE_QUIZ_REQUEST\");\nexport const START_QUIZ_SUCCESS = createActionType([], \"START_QUIZ_SUCCESS\");\nexport const FINISH_QUIZ_SUCCESS = createActionType([], \"FINISH_QUIZ_SUCCESS\");\nexport const LOGOUT_REQUEST = createActionType([], \"LOGOUT_REQUEST\");\nexport const INCOMING_QUESTION = createActionType([], \"INCOMING_QUESTION\");\nexport const ANSWER_QUESTION_REQUEST = createActionType(\n    [],\n    \"ANSWER_QUESTION_REQUEST\"\n);\nexport const ANSWER_QUESTION_SUCCESS = createActionType(\n    [],\n    \"ANSWER_QUESTION_SUCCESS\"\n);\nexport const RECEIVE_USERS_ONLINE = createActionType(\n    [],\n    \"RECEIVE_USERS_ONLINE\"\n);\nexport const SOMEONE_JOINED_QUIZ = createActionType([], \"SOMEONE_JOINED_QUIZ\");\nexport const SOMEONE_LEFT_QUIZ = createActionType([], \"SOMEONE_LEFT_QUIZ\");\n\nexport const AUTHENTICATE_USER = createPromiseTypes([], \"AUTHENTICATE_USER\");\nexport const JWT_AUTHENTICATION_ERROR = createActionType(\n    [],\n    \"JWT_AUTHENTICATION_ERROR\"\n);\n","import axios from \"axios\";\n\nlet _apiService = null;\n\nclass ApiService {\n    get(endpoint, options = null) {\n        return axios.get(endpoint, options);\n    }\n\n    post(endpoint = \"\", data = {}, options) {\n        return axios.post(endpoint, data, options);\n    }\n}\n\n_apiService = new ApiService();\nexport default _apiService;\n","import ApiService from \"./ApiService\";\n\nlet _applicationService = null;\n\nclass ApplicationService {\n    getLeaderboard() {\n        return new Promise((resolve, reject) => {\n            return ApiService.get(\"/quizzes/stats\")\n                .then(response => {\n                    resolve(response);\n                })\n                .catch(err => {\n                    reject(err);\n                });\n        });\n    }\n\n    getQuizList() {\n        return new Promise((resolve, reject) => {\n            return ApiService.get(\"/quizzes\")\n                .then(response => {\n                    resolve(response);\n                })\n                .catch(err => {\n                    reject(err);\n                });\n        });\n    }\n\n    getUserToken() {\n        return localStorage.getItem(\"token\");\n    }\n\n    removeUserToken() {\n        return localStorage.removeItem(\"token\");\n    }\n\n    setUserToken(token) {\n        return localStorage.setItem(\"token\", token);\n    }\n\n    logout() {\n        return new Promise((resolve, reject) => {\n            ApiService.post(\"/auth/logout\")\n                .then(response => {\n                    this.removeUserToken();\n                    resolve(response.data);\n                })\n                .catch(err => {\n                    reject(err);\n                });\n        });\n    }\n\n    authenticateUser() {\n        return new Promise((resolve, reject) => {\n            ApiService.get(\"/auth/user\")\n                .then(response => {\n                    resolve(response.data);\n                })\n                .catch(err => {\n                    reject(err);\n                });\n        });\n    }\n\n    register(name = null, password = null) {\n        return new Promise((resolve, reject) => {\n            ApiService.post(\"/auth/signup\", { name, password })\n                .then(response => {\n                    resolve(response.data);\n                })\n                .catch(err => {\n                    reject(err.response.data.errors);\n                });\n        });\n    }\n\n    login(name = null, password = null) {\n        return new Promise((resolve, reject) => {\n            ApiService.post(\"/auth/login\", { name, password })\n                .then(response => {\n                    this.setUserToken(response.data.token);\n                    resolve(response.data);\n                })\n                .catch(err => {\n                    reject(err.response.data.errors);\n                });\n        });\n    }\n}\n\n_applicationService = new ApplicationService();\nexport default _applicationService;\n","import { Record } from \"immutable\";\nimport { WEB_SOCKET_URL } from \"../config\";\nimport * as actionTypes from \"../redux/actionTypes\";\n\nimport ApplicationService from \"./ApplicationService\";\n\nconst MessageRecord = Record({\n    type: null,\n    payload: {}\n});\n\nconst ALLOWED_WEBSOCKET_ACTION_TYPES = [\n    actionTypes.JOIN_QUIZ_INFO,\n    actionTypes.JOIN_QUIZ_REJECT,\n    actionTypes.JOIN_QUIZ_WAIT,\n    actionTypes.START_QUIZ_SUCCESS,\n    actionTypes.FINISH_QUIZ_SUCCESS,\n    actionTypes.SOMEONE_JOINED_QUIZ,\n    actionTypes.SOMEONE_LEFT_QUIZ,\n    actionTypes.INCOMING_QUESTION,\n    actionTypes.ANSWER_QUESTION_SUCCESS,\n    actionTypes.JWT_AUTHENTICATION_ERROR\n];\n\nlet _webSocketService = null;\n\nclass WebSocketService {\n    constructor() {\n        this.reconnectInterval = null;\n        this.activeConnection = null;\n        this.dispatchAction = null;\n        this.isConnected = false;\n\n        this.webSocketMiddleware = this.webSocketMiddleware.bind(this);\n\n        this.connect();\n        this.retry();\n    }\n\n    webSocketMiddleware({ dispatch }) {\n        this.setDispatchAction(dispatch);\n\n        return next => action => {\n            if (action.webSocketAction) {\n                this.send({\n                    type: action.type,\n                    payload: action.payload\n                });\n            }\n            next(action);\n        };\n    }\n\n    setDispatchAction(dispatch) {\n        this.dispatchAction = dispatch;\n    }\n\n    setActiveConnection(activeConnection) {\n        this.activeConnection = activeConnection;\n    }\n\n    decodeMessage(msg) {\n        let message = {};\n\n        try {\n            message = JSON.parse(msg);\n        } catch (err) {\n            console.log(err);\n        }\n\n        return new MessageRecord(message);\n    }\n\n    parseMessage(msg) {\n        const message = this.decodeMessage(msg);\n\n        if (!ALLOWED_WEBSOCKET_ACTION_TYPES.includes(message.get(\"type\"))) {\n            return;\n        }\n\n        this.dispatchAction({\n            type: message.get(\"type\"),\n            payload: message.get(\"payload\")\n        });\n    }\n\n    send(msg = {}) {\n        if (this.activeConnection && this.isConnected) {\n            const msgString = JSON.stringify({\n                ...msg,\n                token: ApplicationService.getUserToken()\n            });\n\n            return this.activeConnection.send(msgString);\n        }\n    }\n\n    connect() {\n        this.setActiveConnection(new WebSocket(WEB_SOCKET_URL));\n\n        this.activeConnection.onopen = () => {\n            this.isConnected = true;\n            this.activeConnection.onmessage = event => {\n                this.parseMessage(event.data);\n                console.info(\"WebSocketService:\", event.data);\n            };\n            console.info(\"WebSocketService: Connected\");\n        };\n\n        this.activeConnection.onclose = () => {\n            this.disconnect();\n        };\n\n        this.activeConnection.onerror = () => {\n            this.disconnect();\n        };\n    }\n\n    retry() {\n        this.reconnectInterval = setInterval(() => {\n            if (this.isConnected) {\n                return;\n            }\n\n            console.log(\"WebSocketService: Connecting...\");\n            this.connect();\n        }, 1000);\n    }\n\n    disconnect() {\n        if (!this.isConnected) {\n            return;\n        }\n\n        this.isConnected = false;\n        this.activeConnection.close();\n        console.log(\"WebSocketService: Disconnected\");\n    }\n}\n\n_webSocketService = new WebSocketService();\n\nconst webSocketMiddleware = _webSocketService.webSocketMiddleware;\n\nexport { webSocketMiddleware };\n\nexport default _webSocketService;\n","import * as actionTypes from \"../actionTypes\";\nimport { Record } from \"immutable\";\n\nconst Model = Record({\n    name: null\n});\n\nconst initialState = Model();\n\nconst UserReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTHENTICATE_USER.FULFILLED:\n            return state.withMutations(mutant => {\n                mutant.set(\"name\", action.payload.name);\n            });\n        default:\n            return state;\n    }\n};\n\nexport default UserReducer;\n","import * as actionTypes from \"../actionTypes\";\nimport { Record, Map, fromJS } from \"immutable\";\n\nconst userAnswerModel = Record({\n    answerId: null,\n    isCorrect: false\n});\n\nconst questionModel = Record({\n    name: null,\n    answers: [],\n    userAnswer: userAnswerModel()\n});\n\nconst activeQuestionModel = Record({\n    questionId: null,\n    question: questionModel()\n});\n\nconst StateModel = Record({\n    activeQuiz: null,\n    activeQuestion: activeQuestionModel(),\n    activeUsers: [],\n    error: null,\n    waitForUsersCount: 0,\n    isInProgress: false,\n    isFinished: false,\n    isUnexpectedFinished: false,\n    usersOnline: 0\n});\n\nconst initialState = StateModel();\n\nconst QuizReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LEAVE_QUIZ_REQUEST:\n            return initialState;\n        case actionTypes.JOIN_QUIZ_REQUEST:\n            return state.withMutations(mutant => {\n                mutant.set(\"error\", null);\n                mutant.set(\"activeUsers\", []);\n                mutant.set(\"activeQuestion\", new Map());\n                mutant.set(\"isInProgress\", false);\n                mutant.set(\"isFinished\", false);\n                mutant.set(\"isUnexpectedFinished\", false);\n            });\n        case actionTypes.JOIN_QUIZ_REJECT:\n            return state.withMutations(mutant => {\n                mutant.set(\"error\", fromJS(action.payload));\n            });\n        case actionTypes.JOIN_QUIZ_INFO:\n            return state.withMutations(mutant => {\n                mutant.set(\"activeQuiz\", fromJS(action.payload));\n            });\n        case actionTypes.JOIN_QUIZ_WAIT:\n            return state.withMutations(mutant => {\n                mutant.set(\"waitForUsersCount\", action.payload);\n            });\n        case actionTypes.START_QUIZ_SUCCESS:\n            return state.withMutations(mutant => {\n                mutant.set(\"waitForUsersCount\", 0);\n                mutant.set(\"isInProgress\", true);\n                mutant.set(\"isFinished\", false);\n                mutant.set(\"isUnexpectedFinished\", false);\n                mutant.set(\"activeUsers\", []);\n                mutant.set(\"activeQuestion\", new Map());\n            });\n        case actionTypes.FINISH_QUIZ_SUCCESS:\n            return state.withMutations(mutant => {\n                mutant.set(\"waitForUsersCount\", 0);\n                mutant.set(\"isInProgress\", false);\n                mutant.set(\"isFinished\", true);\n                mutant.set(\"activeQuestion\", new Map());\n                mutant.set(\"activeUsers\", action.payload.activeUsers);\n                mutant.set(\n                    \"isUnexpectedFinished\",\n                    action.payload.isUnexpectedFinished ? true : false\n                );\n            });\n        case actionTypes.INCOMING_QUESTION:\n            return state.withMutations(mutant => {\n                mutant.set(\n                    \"activeQuestion\",\n                    activeQuestionModel({\n                        questionId: action.payload.questionId,\n                        question: questionModel(action.payload.question)\n                    })\n                );\n                mutant.set(\"activeUsers\", action.payload.activeUsers);\n            });\n        case actionTypes.ANSWER_QUESTION_SUCCESS:\n            return state.withMutations(mutant => {\n                mutant.setIn(\n                    [\"activeQuestion\", \"question\", \"userAnswer\"],\n                    userAnswerModel({\n                        answerId: action.payload.answerId,\n                        isCorrect: action.payload.isCorrect\n                    })\n                );\n            });\n        case actionTypes.RECEIVE_USERS_ONLINE:\n            return state.withMutations(mutant => {\n                mutant.set(\"usersOnline\", action.payload);\n            });\n        default:\n            return state;\n    }\n};\n\nexport default QuizReducer;\n","import * as actionTypes from \"../actionTypes\";\nimport { Record, Map, fromJS } from \"immutable\";\n\nconst StateModel = Record({\n    data: new Map(),\n    isPending: false,\n    isError: false\n});\n\nconst initialState = StateModel();\n\nconst QuizListReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_ALL_QUIZZES.FULFILLED:\n            return state.withMutations(mutant => {\n                mutant.set(\"isPending\", false);\n                mutant.set(\"isError\", false);\n                mutant.set(\n                    \"data\",\n                    new Map().withMutations(map => {\n                        action.payload.data.forEach(item =>\n                            map.set(item._id, fromJS(item))\n                        );\n                    })\n                );\n            });\n        case actionTypes.GET_ALL_QUIZZES.PENDING:\n            return state.withMutations(mutant => {\n                mutant.set(\"isPending\", true);\n                mutant.set(\"isError\", false);\n                mutant.set(\"data\", new Map());\n            });\n        case actionTypes.GET_ALL_QUIZZES.REJECTED:\n            return state.withMutations(mutant => {\n                mutant.set(\"isError\", true);\n                mutant.set(\"isPending\", false);\n                mutant.set(\"data\", new Map());\n            });\n        case actionTypes.SOMEONE_JOINED_QUIZ:\n        case actionTypes.SOMEONE_LEFT_QUIZ:\n            return state.withMutations(mutant => {\n                if (!mutant.getIn([\"data\", action.payload.quizId])) {\n                    return;\n                }\n\n                mutant.setIn(\n                    [\"data\", action.payload.quizId, \"user\"],\n                    action.payload.user\n                );\n            });\n        default:\n            return state;\n    }\n};\n\nexport default QuizListReducer;\n","import * as actionTypes from \"../actionTypes\";\nimport { Record } from \"immutable\";\n\nconst Model = Record({\n    data: [],\n    isPending: false,\n    isError: false\n});\n\nconst initialState = Model();\n\nconst UserReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_LEADERBOARD.FULFILLED:\n            return state.withMutations(mutant => {\n                mutant.set(\"isPending\", false);\n                mutant.set(\"isError\", false);\n                mutant.set(\"data\", action.payload.data);\n            });\n        case actionTypes.GET_LEADERBOARD.PENDING:\n            return state.withMutations(mutant => {\n                mutant.set(\"isPending\", true);\n                mutant.set(\"isError\", false);\n                mutant.set(\"data\", []);\n            });\n        case actionTypes.GET_LEADERBOARD.REJECTED:\n            return state.withMutations(mutant => {\n                mutant.set(\"isError\", true);\n                mutant.set(\"isPending\", false);\n                mutant.set(\"data\", []);\n            });\n        default:\n            return state;\n    }\n};\n\nexport default UserReducer;\n","import * as actionTypes from \"../actionTypes\";\nimport { Record } from \"immutable\";\n\nconst Model = Record({\n    isAuthenticated: false,\n    jwtError: \"\"\n});\n\nconst initialState = Model();\n\nconst UserReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTHENTICATE_USER.FULFILLED:\n            return state.withMutations(mutant => {\n                mutant.set(\"isAuthenticated\", action.payload.isAuthenticated);\n            });\n        case actionTypes.JWT_AUTHENTICATION_ERROR:\n            return state.withMutations(mutant => {\n                mutant.set(\"jwtError\", action.payload);\n            });\n        default:\n            return state;\n    }\n};\n\nexport default UserReducer;\n","import { combineReducers } from \"redux\";\nimport user from \"./user\";\nimport quiz from \"./quiz\";\nimport quizList from \"./quizList\";\nimport leaderboard from \"./leaderboard\";\nimport auth from \"./auth\";\n\nexport default combineReducers({\n    user,\n    quiz,\n    quizList,\n    leaderboard,\n    auth\n});\n","import thunk from \"redux-thunk\";\nimport promiseMiddleware from \"redux-promise-middleware\";\nimport { webSocketMiddleware } from \"../../services/WebSocketService\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport reducers from \"../reducers\";\n\nconst middleware = [thunk, promiseMiddleware(), webSocketMiddleware];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import * as actionTypes from \"./actionTypes\";\n\nimport ApplicationService from \"../services/ApplicationService\";\n\nexport const getQuizList = () => dispatch =>\n    dispatch({\n        type: actionTypes.GET_ALL_QUIZZES.TYPE,\n        payload: ApplicationService.getQuizList\n    });\n\nexport const getLeaderboard = () => dispatch =>\n    dispatch({\n        type: actionTypes.GET_LEADERBOARD.TYPE,\n        payload: ApplicationService.getLeaderboard\n    });\n\nexport const authenticateUser = () => dispatch =>\n    dispatch({\n        type: actionTypes.AUTHENTICATE_USER.TYPE,\n        payload: ApplicationService.authenticateUser\n    });\n\nexport const joinQuizRequest = quizId => ({\n    type: actionTypes.JOIN_QUIZ_REQUEST,\n    payload: { quizId },\n    webSocketAction: true\n});\n\nexport const leaveQuizRequest = quizId => ({\n    type: actionTypes.LEAVE_QUIZ_REQUEST,\n    payload: { quizId },\n    webSocketAction: true\n});\n\nexport const logoutRequest = () => ({\n    type: actionTypes.LOGOUT_REQUEST,\n    payload: ApplicationService.logout()\n});\n\nexport const answerQuestionRequest = params => ({\n    type: actionTypes.ANSWER_QUESTION_REQUEST,\n    payload: params,\n    webSocketAction: true\n});\n\nexport default {\n    getQuizList,\n    joinQuizRequest,\n    leaveQuizRequest,\n    logoutRequest,\n    answerQuestionRequest,\n    getLeaderboard,\n    authenticateUser\n};\n","export const getQuizList = store => store.quizList.get(\"data\").toJS();\nexport const getQuizListIsPending = store => store.quizList.get(\"isPending\");\nexport const getQuizListIsError = store => store.quizList.get(\"isError\");\n\nexport const getQuizError = store => store.quiz.get(\"error\");\nexport const getWaitForUsersCount = store =>\n    store.quiz.get(\"waitForUsersCount\");\nexport const getQuizIsInProgress = store => store.quiz.get(\"isInProgress\");\nexport const getQuizIsFinished = store => store.quiz.get(\"isFinished\");\nexport const getQuizIsUnexpectedFinished = store =>\n    store.quiz.get(\"isUnexpectedFinished\");\nexport const getQuizName = store => store.quiz.getIn([\"activeQuiz\", \"name\"]);\n\nexport const getActiveQuestion = store => store.quiz.get(\"activeQuestion\");\nexport const getActiveUsers = store => store.quiz.get(\"activeUsers\");\nexport const getUsersOnline = store => store.quiz.get(\"usersOnline\");\n\nexport const getCurrentUserName = store => store.user.get(\"name\");\n\nexport const getLeaderboard = store => store.leaderboard.get(\"data\");\nexport const getLeaderboardIsPending = store =>\n    store.leaderboard.get(\"isPending\");\nexport const getLeaderboardIsError = store => store.leaderboard.get(\"isError\");\n\nexport const getIsAuthenticated = store => store.auth.get(\"isAuthenticated\");\nexport const getJwtAuthenticatedError = store => store.auth.get(\"jwtError\");\n\nexport default {\n    getQuizList,\n    getQuizListIsError,\n    getQuizListIsPending,\n    getQuizError,\n    getWaitForUsersCount,\n    getQuizIsInProgress,\n    getQuizName,\n    getIsAuthenticated,\n    getQuizIsFinished,\n    getActiveQuestion,\n    getActiveUsers,\n    getLeaderboard,\n    getLeaderboardIsPending,\n    getLeaderboardIsError,\n    getUsersOnline,\n    getQuizIsUnexpectedFinished,\n    getCurrentUserName,\n    getJwtAuthenticatedError\n};\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actions from \"../redux/actions\";\nimport selectors from \"../redux/selectors\";\nimport {\n    TopAppBar,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n    Button,\n    ButtonIcon\n} from \"rmwc\";\n\nclass Header extends Component {\n    static propTypes = {\n        userName: PropTypes.string,\n        isAuthenticated: PropTypes.bool.isRequired,\n        logoutAction: PropTypes.func.isRequired\n    };\n\n    render() {\n        const { history, isAuthenticated, logoutAction, userName } = this.props;\n\n        return (\n            <TopAppBar>\n                <TopAppBarRow>\n                    <TopAppBarSection alignStart>\n                        <TopAppBarTitle>\n                            {isAuthenticated ? (\n                                <Link to=\"/dashboard\">\n                                    <Button theme=\"onPrimary\">\n                                        {userName}\n                                    </Button>\n                                </Link>\n                            ) : (\n                                <Link to=\"/\">\n                                    <Button theme=\"onPrimary\">App</Button>\n                                </Link>\n                            )}\n                        </TopAppBarTitle>\n                    </TopAppBarSection>\n                    <TopAppBarSection alignEnd>\n                        <Link to=\"/about\">\n                            <Button unelevated>About</Button>\n                        </Link>\n                        {isAuthenticated ? (\n                            <div>\n                                <Link to=\"/leaderboard\">\n                                    <Button unelevated>Student Scrore</Button>\n                                </Link>\n                                &nbsp;\n                                <Button\n                                    unelevated\n                                    theme=\"secondary-bg on-secondary\"\n                                    onClick={() => {\n                                        logoutAction();\n                                        history.push(\"/\");\n                                        window.location.reload();\n                                    }}\n                                >\n                                    <ButtonIcon icon=\"exit_to_app\" />\n                                    Logout\n                                </Button>\n                            </div>\n                        ) : (\n                            <div>\n                                <Link to=\"/sign-up\">\n                                    <Button unelevated>Sign up</Button>\n                                </Link>\n                                <Link to=\"/login\">\n                                    <Button unelevated>Log in</Button>\n                                </Link>\n                            </div>\n                        )}\n                    </TopAppBarSection>\n                </TopAppBarRow>\n            </TopAppBar>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    userName: selectors.getCurrentUserName(state),\n    isAuthenticated: selectors.getIsAuthenticated(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    logoutAction: () => dispatch(actions.logoutRequest())\n});\n\nconst ConnectedHeader = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Header)\n);\n\nexport default ConnectedHeader;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Header from \"../containers/Header\";\nimport { Theme, TopAppBarFixedAdjust, Typography, Button } from \"rmwc\";\n\nexport default class Homepage extends Component {\n    render() {\n        return (\n            <Theme tag=\"main\" use=\"primary-bg on-primary\">\n                <Header />\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <div className=\"container\">\n                        <Typography use=\"headline1\" tag=\"h1\">\n                            OESA\n                        </Typography>\n                        <Typography use=\"headline5\" tag=\"h2\">\n                            OLINE + EXAM + SERVICE + APP\n                        </Typography>\n                        <Link to=\"/sign-up\">\n                            <Button theme=\"onPrimary\">Sign up</Button>\n                        </Link>\n                        &nbsp;\n                        <Link to=\"/login\">\n                            <Button raised theme=\"secondary-bg on-secondary\">\n                                Log in\n                            </Button>\n                        </Link>\n                    </div>\n                </div>\n            </Theme>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actions from \"../redux/actions\";\nimport selectors from \"../redux/selectors\";\nimport { Button, LinearProgress } from \"rmwc\";\nimport {\n    DataTable,\n    DataTableContent,\n    DataTableHead,\n    DataTableBody,\n    DataTableHeadCell,\n    DataTableRow,\n    DataTableCell\n} from \"@rmwc/data-table\";\nimport \"@rmwc/data-table/data-table.css\";\n\nclass QuizList extends Component {\n    static propTypes = {\n        data: PropTypes.object,\n        usersOnline: PropTypes.number,\n        getQuizList: PropTypes.func.isRequired,\n        getUsersOnline: PropTypes.func,\n        isPending: PropTypes.bool.isRequired,\n        isError: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {\n        data: []\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.handleQuizClick = this.handleQuizClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.getQuizList();\n    }\n\n    handleQuizClick({ _id, usersCount, maxUsersCount }) {\n        if (usersCount >= maxUsersCount) {\n            return;\n        }\n\n        this.props.history.push(`/play/${_id}`);\n    }\n\n    render() {\n        const { data, isError, isPending } = this.props;\n\n        return (\n            <DataTable>\n                <DataTableContent style={{ minWidth: \"420px\" }}>\n                    <DataTableHead>\n                        <DataTableRow>\n                            <DataTableHeadCell>Name</DataTableHeadCell>\n                            <DataTableHeadCell alignEnd>\n                                Users\n                            </DataTableHeadCell>\n                        </DataTableRow>\n                    </DataTableHead>\n                    <DataTableBody>\n                        {isPending ? (\n                            <DataTableRow>\n                                <DataTableCell alignMiddle colSpan=\"2\">\n                                    <LinearProgress determinate={false} />\n                                </DataTableCell>\n                            </DataTableRow>\n                        ) : null}\n                        {isError ? (\n                            <DataTableRow activated>\n                                <DataTableCell alignMiddle colSpan=\"2\">\n                                    Try again later\n                                </DataTableCell>\n                            </DataTableRow>\n                        ) : null}\n                        {Object.values(data).length > 0\n                            ? Object.values(data)\n                                  .sort((a, b) =>\n                                      a.name < b.name\n                                          ? -1\n                                          : a.name > b.name\n                                          ? 1\n                                          : 0\n                                  )\n                                  .map((quiz, index) => (\n                                      <DataTableRow\n                                          key={index}\n                                          activated={\n                                              quiz.usersCount >=\n                                              quiz.maxUsersCount\n                                          }\n                                      >\n                                          <DataTableCell>\n                                              {quiz.name}\n                                          </DataTableCell>\n                                          <DataTableCell alignEnd>\n                                              <Button\n                                                  raised\n                                                  dense\n                                                  disabled={\n                                                      quiz.usersCount >=\n                                                      quiz.maxUsersCount\n                                                  }\n                                                  onClick={() =>\n                                                      this.handleQuizClick(quiz)\n                                                  }\n                                              >\n                                                  {quiz.usersCount}\n                                                  &nbsp;/&nbsp;\n                                                  {quiz.maxUsersCount}\n                                              </Button>\n                                          </DataTableCell>\n                                      </DataTableRow>\n                                  ))\n                            : null}\n                    </DataTableBody>\n                </DataTableContent>\n            </DataTable>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    data: selectors.getQuizList(state),\n    isPending: selectors.getQuizListIsPending(state),\n    isError: selectors.getQuizListIsError(state),\n    usersOnline: selectors.getUsersOnline(state)\n});\n\nconst mapDispatchToProps = {\n    getQuizList: actions.getQuizList\n};\n\nconst ConnectedQuizList = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(QuizList)\n);\n\nexport default ConnectedQuizList;\n","import React, { Component } from \"react\";\nimport QuizList from \"../containers/QuizList\";\nimport Header from \"../containers/Header\";\nimport { Theme, TopAppBarFixedAdjust, Typography } from \"rmwc\";\n\nexport default class Dashboard extends Component {\n    render() {\n        return (\n            <Theme tag=\"main\">\n                <Header />\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <div className=\"container\">\n                        <Typography use=\"headline4\" tag=\"h1\">\n                            Quiz List\n                        </Typography>\n                        <QuizList />\n                    </div>\n                </div>\n            </Theme>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actions from \"../redux/actions\";\nimport selectors from \"../redux/selectors\";\nimport { LinearProgress } from \"rmwc\";\nimport {\n    DataTable,\n    DataTableContent,\n    DataTableHead,\n    DataTableBody,\n    DataTableHeadCell,\n    DataTableRow,\n    DataTableCell\n} from \"@rmwc/data-table\";\nimport \"@rmwc/data-table/data-table.css\";\n\nclass Leaderboard extends Component {\n    static propTypes = {\n        data: PropTypes.array,\n        getLeaderboard: PropTypes.func.isRequired,\n        isPending: PropTypes.bool.isRequired,\n        isError: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {\n        data: []\n    };\n\n    componentWillMount() {\n        this.props.getLeaderboard();\n    }\n\n    render() {\n        const { data, isPending, isError } = this.props;\n\n        return (\n            <DataTable>\n                <DataTableContent style={{ minWidth: \"420px\" }}>\n                    <DataTableHead>\n                        <DataTableRow>\n                            <DataTableHeadCell>Student</DataTableHeadCell>\n                            <DataTableHeadCell alignEnd>\n                                Points\n                            </DataTableHeadCell>\n                        </DataTableRow>\n                    </DataTableHead>\n                    <DataTableBody>\n                        {isPending ? (\n                            <DataTableRow>\n                                <DataTableCell alignMiddle colSpan=\"2\">\n                                    <LinearProgress determinate={false} />\n                                </DataTableCell>\n                            </DataTableRow>\n                        ) : null}\n                        {isError ? (\n                            <DataTableRow activated>\n                                <DataTableCell alignMiddle colSpan=\"2\">\n                                    Try again later\n                                </DataTableCell>\n                            </DataTableRow>\n                        ) : null}\n                        {data.length > 0\n                            ? data.map((user, index) => (\n                                  <DataTableRow key={index}>\n                                      <DataTableCell>{user.name}</DataTableCell>\n                                      <DataTableCell alignEnd>\n                                          {user.total_points}\n                                      </DataTableCell>\n                                  </DataTableRow>\n                              ))\n                            : null}\n                    </DataTableBody>\n                </DataTableContent>\n            </DataTable>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    data: selectors.getLeaderboard(state),\n    isPending: selectors.getLeaderboardIsPending(state),\n    isError: selectors.getLeaderboardIsError(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getLeaderboard: () => dispatch(actions.getLeaderboard())\n});\n\nconst ConnectedLeaderboard = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Leaderboard)\n);\n\nexport default ConnectedLeaderboard;\n","import React, { Component } from \"react\";\nimport Header from \"../containers/Header\";\nimport LeaderboardContainer from \"../containers/Pointsboard\";\nimport { Theme, TopAppBarFixedAdjust, Typography } from \"rmwc\";\n\nexport default class Leaderboard extends Component {\n    render() {\n        return (\n            <Theme tag=\"main\">\n                <Header />\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <div className=\"container\">\n                        <Typography use=\"headline4\" tag=\"h1\">\n                            Student Score\n                        </Typography>\n                        <LeaderboardContainer />\n                    </div>\n                </div>\n            </Theme>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Record } from \"immutable\";\nimport ApplicationService from \"../services/ApplicationService\";\nimport { TextField, Button, Snackbar } from \"rmwc\";\n\nconst ErrorRecord = Record({\n    name: null,\n    password: null\n});\n\nconst InputRecord = Record({\n    name: \"\",\n    password: \"\"\n});\n\nclass RegisterForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            errors: new ErrorRecord({}),\n            inputs: new InputRecord({}),\n            isSnackbarOpen: false\n        };\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onTextFieldChange = this.onTextFieldChange.bind(this);\n    }\n\n    onSubmit(event) {\n        const { inputs } = this.state;\n\n        event.preventDefault();\n\n        ApplicationService.register(inputs.get(\"name\"), inputs.get(\"password\"))\n            .then(() => {\n                ApplicationService.login(\n                    inputs.get(\"name\"),\n                    inputs.get(\"password\")\n                ).then(() => {\n                    this.props.history.push(\"/dashboard\");\n                    window.location.reload();\n                });\n            })\n            .catch(err => {\n                this.setState({\n                    errors: new ErrorRecord(err),\n                    isSnackbarOpen: true\n                });\n            });\n    }\n\n    onTextFieldChange(event) {\n        const { inputs } = this.state;\n\n        this.setState({\n            inputs: inputs.set(event.target.name, event.target.value)\n        });\n    }\n\n    render() {\n        const { inputs, errors } = this.state;\n\n        return (\n            <form onSubmit={this.onSubmit} method=\"post\">\n                <TextField\n                    fullwidth\n                    placeholder=\"Username\"\n                    value={inputs.get(\"name\")}\n                    onChange={this.onTextFieldChange}\n                    type=\"text\"\n                    name=\"name\"\n                    invalid={errors.get(\"name\") !== null}\n                />\n                <TextField\n                    fullwidth\n                    placeholder=\"Password\"\n                    value={inputs.get(\"password\")}\n                    onChange={this.onTextFieldChange}\n                    type=\"password\"\n                    name=\"password\"\n                    invalid={errors.get(\"password\") !== null}\n                />\n                <br />\n                <Button type=\"submit\" raised theme=\"secondary-bg on-secondary\">\n                    Sign up\n                </Button>\n                {Object.values(errors.toJS()).map(\n                    (error, index) =>\n                        error && (\n                            <Snackbar\n                                key={index}\n                                show={this.state.isSnackbarOpen}\n                                onHide={() =>\n                                    this.setState({ isSnackbarOpen: false })\n                                }\n                                message={error}\n                                actionText=\"Dismiss\"\n                            />\n                        )\n                )}\n            </form>\n        );\n    }\n}\n\nexport default withRouter(RegisterForm);\n","import React, { Component } from \"react\";\nimport SignupForm from \"../containers/SignupForm\";\nimport Header from \"../containers/Header\";\nimport { Theme, TopAppBarFixedAdjust, Typography } from \"rmwc\";\n\nexport default class Signup extends Component {\n    render() {\n        return (\n            <Theme tag=\"main\">\n                <Header />\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <div className=\"container\">\n                        <Typography use=\"headline4\" tag=\"h1\">\n                            Register\n                        </Typography>\n                        <SignupForm />\n                    </div>\n                </div>\n            </Theme>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Record } from \"immutable\";\nimport { withRouter } from \"react-router-dom\";\nimport ApplicationService from \"../services/ApplicationService\";\nimport { TextField, Button, Snackbar } from \"rmwc\";\n\nconst ErrorRecord = Record({\n    name: null,\n    password: null\n});\n\nconst InputRecord = Record({\n    name: \"\",\n    password: \"\"\n});\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            errors: new ErrorRecord({}),\n            inputs: new InputRecord({}),\n            isSnackbarOpen: false\n        };\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onTextFieldChange = this.onTextFieldChange.bind(this);\n    }\n\n    onSubmit(event) {\n        const { inputs } = this.state;\n\n        event.preventDefault();\n\n        ApplicationService.login(inputs.get(\"name\"), inputs.get(\"password\"))\n            .then(() => {\n                this.props.history.push(\"/dashboard\");\n                window.location.reload();\n            })\n            .catch(err => {\n                this.setState({\n                    errors: new ErrorRecord(err),\n                    isSnackbarOpen: true\n                });\n            });\n    }\n\n    onTextFieldChange(event) {\n        const { inputs } = this.state;\n\n        this.setState({\n            inputs: inputs.set(event.target.name, event.target.value)\n        });\n    }\n\n    render() {\n        const { inputs, errors } = this.state;\n\n        return (\n            <form onSubmit={this.onSubmit} method=\"post\">\n                <TextField\n                    fullwidth\n                    placeholder=\"Username\"\n                    value={inputs.get(\"name\")}\n                    onChange={this.onTextFieldChange}\n                    type=\"text\"\n                    name=\"name\"\n                    invalid={errors.get(\"name\") !== null}\n                />\n                <TextField\n                    fullwidth\n                    placeholder=\"Password\"\n                    value={inputs.get(\"password\")}\n                    onChange={this.onTextFieldChange}\n                    type=\"password\"\n                    name=\"password\"\n                    invalid={errors.get(\"password\") !== null}\n                />\n                <br />\n                <Button type=\"submit\" raised theme=\"secondary-bg on-secondary\">\n                    Log in\n                </Button>\n                {Object.values(errors.toJS()).map(\n                    (error, index) =>\n                        error && (\n                            <Snackbar\n                                key={index}\n                                show={this.state.isSnackbarOpen}\n                                onHide={() =>\n                                    this.setState({ isSnackbarOpen: false })\n                                }\n                                message={error}\n                                actionText=\"Dismiss\"\n                            />\n                        )\n                )}\n            </form>\n        );\n    }\n}\n\nconst ConnectedQuiz = withRouter(LoginForm);\n\nexport default ConnectedQuiz;\n","import React, { Component } from \"react\";\nimport LoginForm from \"../containers/LoginForm\";\nimport Header from \"../containers/Header\";\nimport { Theme, TopAppBarFixedAdjust, Typography } from \"rmwc\";\n\nexport default class Login extends Component {\n    render() {\n        return (\n            <Theme tag=\"main\">\n                <Header />\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <div className=\"container\">\n                        <Typography use=\"headline4\" tag=\"h1\">\n                            Log in\n                        </Typography>\n                        <LoginForm />\n                    </div>\n                </div>\n            </Theme>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Header from \"../containers/Header\";\nimport { Theme, TopAppBarFixedAdjust, Typography } from \"rmwc\";\n\nexport default class About extends Component {\n    render() {\n        return (\n            <Theme tag=\"main\" use=\"primary-bg on-primary\">\n                <Header />\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <div className=\"container\">\n                        <Typography use=\"headline4\" tag=\"h1\">\n                            About\n                        </Typography>\n                        <Typography use=\"body1\" tag=\"p\">\n                            This is a online exam app with public and protected links for\n                            access control, handled by Passport on the back-end.\n                            Registered student can take part in universty exams in\n                            real-time remotly. All the exam\n                            interactions are done through WebSocket with JWT\n                            authentication. Student can even use this app to\n                            practise for the upp coming exam trough quiz games.\n                            Ther are even initial quiz questions and answers\n                            are downloaded from OpenTDB, parsed and inserted\n                            into database.\n                        </Typography>\n                    </div>\n                </div>\n            </Theme>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport actions from \"../redux/actions\";\nimport selectors from \"../redux/selectors\";\nimport {\n    Typography,\n    Button,\n    ButtonIcon,\n    Grid,\n    GridCell,\n    List,\n    ListItem,\n    ListItemGraphic,\n    ThemeProvider,\n    TopAppBarFixedAdjust,\n    TopAppBar,\n    TopAppBarRow,\n    TopAppBarSection,\n    LinearProgress,\n    Chip,\n    ChipSet,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    DialogButton\n} from \"rmwc\";\nimport { CircularProgress } from \"@rmwc/circular-progress\";\n\nimport \"@rmwc/circular-progress/circular-progress.css\";\n\nconst TIME_TO_ANSWER_QUESTION = 10;\n\nclass Quiz extends Component {\n    static propTypes = {\n        quizId: PropTypes.string.isRequired,\n        quizName: PropTypes.string,\n        joinQuizRequest: PropTypes.func.isRequired,\n        leaveQuizRequest: PropTypes.func.isRequired,\n        answerQuestionRequest: PropTypes.func.isRequired,\n        data: PropTypes.object,\n        error: PropTypes.string,\n        waitForUsersCount: PropTypes.number.isRequired,\n        isInProgress: PropTypes.bool.isRequired,\n        isFinished: PropTypes.bool.isRequired,\n        isUnexpectedFinished: PropTypes.bool.isRequired,\n        activeQuestion: PropTypes.object,\n        activeUsers: PropTypes.array.isRequired,\n        jwtError: PropTypes.string\n    };\n\n    static defaultProps = {\n        data: {}\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.getAnswerIcon = this.getAnswerIcon.bind(this);\n        this.handleTimerTick = this.handleTimerTick.bind(this);\n        this.handleStartTimer = this.handleStartTimer.bind(this);\n        this.handleStopTimer = this.handleStopTimer.bind(this);\n        this.handleDialogOpen = this.handleDialogOpen.bind(this);\n        this.handleDialogClose = this.handleDialogClose.bind(this);\n\n        this.state = {\n            timer: TIME_TO_ANSWER_QUESTION,\n            isPaused: true,\n            isDialogOpen: false\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            this.props.activeQuestion.questionId !==\n            prevProps.activeQuestion.questionId\n        ) {\n            this.handleStartTimer();\n        }\n    }\n\n    componentDidMount() {\n        this.props.joinQuizRequest(this.props.quizId);\n    }\n\n    componentWillUnmount() {\n        this.props.leaveQuizRequest(this.props.quizId);\n    }\n\n    handleTimerTick() {\n        this.setState({ timer: this.state.timer - 1 });\n    }\n\n    handleStartTimer() {\n        clearInterval(this.interval);\n        this.setState({ timer: TIME_TO_ANSWER_QUESTION, isPaused: true });\n\n        this.interval = setInterval(this.handleTimerTick, 1000);\n        this.setState({ isPaused: false });\n    }\n\n    handleStopTimer() {\n        clearInterval(this.interval);\n        this.setState({ isPaused: true });\n    }\n\n    handleAnswerClick(answerId) {\n        if (this.props.activeQuestion.question.userAnswer.answerId !== null) {\n            return;\n        }\n\n        this.props.answerQuestionRequest({\n            quizId: this.props.quizId,\n            questionId: this.props.activeQuestion.questionId,\n            answerId: answerId\n        });\n\n        this.handleStopTimer();\n    }\n\n    getAnswerIcon(answerId) {\n        const { activeQuestion } = this.props;\n\n        if (activeQuestion.question.userAnswer.answerId === null) {\n            return \"radio_button_unchecked\";\n        }\n\n        if (activeQuestion.question.userAnswer.answerId !== answerId) {\n            return \"radio_button_unchecked\";\n        }\n\n        if (activeQuestion.question.userAnswer.isCorrect) {\n            return \"check\";\n        }\n\n        return \"close\";\n    }\n\n    handleDialogOpen() {\n        this.setState({ isDialogOpen: true });\n    }\n\n    handleDialogClose(evt) {\n        this.setState({ isDialogOpen: false });\n\n        if (evt.detail.action === \"accept\") {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    render() {\n        const {\n            error,\n            waitForUsersCount,\n            isInProgress,\n            isFinished,\n            isUnexpectedFinished,\n            quizName,\n            activeQuestion,\n            activeUsers,\n            jwtError\n        } = this.props;\n\n        const { isPaused } = this.state;\n\n        const timer = new Date(this.state.timer * 1000);\n\n        return (\n            <div>\n                <Dialog open={jwtError !== \"\"}>\n                    <DialogTitle>Authentication Error</DialogTitle>\n                    <DialogContent>{jwtError}</DialogContent>\n                    <DialogActions>\n                        <Link to=\"/dashboard\">\n                            <DialogButton>Close</DialogButton>\n                        </Link>\n                    </DialogActions>\n                </Dialog>\n                <Dialog\n                    open={this.state.isDialogOpen}\n                    onClose={evt => this.handleDialogClose(evt)}\n                >\n                    <DialogTitle>Are you sure?</DialogTitle>\n                    <DialogContent>You will not get any points</DialogContent>\n                    <DialogActions>\n                        <DialogButton action=\"close\">Cancel</DialogButton>\n                        <DialogButton action=\"accept\" isDefaultAction>\n                            Yes\n                        </DialogButton>\n                    </DialogActions>\n                </Dialog>\n                <TopAppBar>\n                    <TopAppBarRow>\n                        <TopAppBarSection alignEnd>\n                            {isInProgress ? (\n                                <Button\n                                    unelevated\n                                    onClick={this.handleDialogOpen}\n                                >\n                                    <ButtonIcon icon=\"close\" />\n                                    Finish Quiz\n                                </Button>\n                            ) : (\n                                <Link to=\"/dashboard\">\n                                    <Button unelevated>\n                                        <ButtonIcon icon=\"arrow_back\" />\n                                        Back to Dashboard\n                                    </Button>\n                                </Link>\n                            )}\n                        </TopAppBarSection>\n                    </TopAppBarRow>\n                </TopAppBar>\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <Grid fixedColumnWidth align=\"left\">\n                        {isFinished ? (\n                            <GridCell span=\"12\">\n                                <Typography use=\"headline1\" tag=\"h1\">\n                                    Finished\n                                </Typography>\n                                {isUnexpectedFinished ? (\n                                    <Typography use=\"headline6\" tag=\"h6\">\n                                        Oh no, someone has left the quiz. You\n                                        still get to keep your points!\n                                    </Typography>\n                                ) : null}\n                            </GridCell>\n                        ) : null}\n                        {!isInProgress &&\n                        !isFinished &&\n                        !isUnexpectedFinished ? (\n                            <GridCell span=\"12\">\n                                <Typography use=\"headline1\" tag=\"h1\">\n                                    {quizName}\n                                </Typography>\n                            </GridCell>\n                        ) : null}\n                        <GridCell span=\"4\">\n                            {waitForUsersCount !== 0 && !isInProgress ? (\n                                <ThemeProvider\n                                    options={{\n                                        primary: \"#03dac4\"\n                                    }}\n                                >\n                                    <Typography use=\"headline6\" tag=\"h6\">\n                                        Waiting for {waitForUsersCount} more\n                                        users to join...\n                                    </Typography>\n                                    <LinearProgress determinate={false} />\n                                </ThemeProvider>\n                            ) : null}\n                            {error ? <span>{error}</span> : null}\n                        </GridCell>\n                        {Object.keys(activeQuestion).length &&\n                        activeQuestion.question ? (\n                            <GridCell span=\"12\">\n                                <List theme=\"textPrimaryOnDark\">\n                                    <Typography use=\"headline2\" tag=\"h2\">\n                                        {isPaused ? (\n                                            <ThemeProvider\n                                                options={{\n                                                    primary: \"#03dac4\"\n                                                }}\n                                            >\n                                                <CircularProgress size=\"xlarge\" />\n                                            </ThemeProvider>\n                                        ) : (\n                                            <span>\n                                                00:\n                                                {timer.getSeconds() < 10\n                                                    ? \"0\"\n                                                    : \"\"}\n                                                {timer.getSeconds()}\n                                            </span>\n                                        )}\n                                    </Typography>\n                                    <Typography use=\"headline5\" tag=\"h5\">\n                                        {activeQuestion.question.name}\n                                    </Typography>\n                                    {activeQuestion.question.answers.map(\n                                        (answer, answerId) => (\n                                            <ListItem\n                                                key={answerId}\n                                                disabled={\n                                                    activeQuestion.question\n                                                        .userAnswer.answerId !==\n                                                        null &&\n                                                    activeQuestion.question\n                                                        .userAnswer.answerId !==\n                                                        answerId\n                                                }\n                                                onClick={() =>\n                                                    this.handleAnswerClick(\n                                                        answerId\n                                                    )\n                                                }\n                                            >\n                                                <ListItemGraphic\n                                                    style={{ color: \"inherit\" }}\n                                                    icon={this.getAnswerIcon(\n                                                        answerId\n                                                    )}\n                                                />{\" \"}\n                                                {answer}\n                                            </ListItem>\n                                        )\n                                    )}\n                                </List>\n                            </GridCell>\n                        ) : null}\n                        {activeUsers.length > 0 ? (\n                            <GridCell span=\"12\">\n                                <ChipSet>\n                                    {activeUsers.map((activeUser, index) => (\n                                        <Chip\n                                            key={index}\n                                            selected\n                                            leadingIcon=\"person\"\n                                        >\n                                            {activeUser.name}:{\" \"}\n                                            <b>{activeUser.points}</b>\n                                        </Chip>\n                                    ))}\n                                </ChipSet>\n                            </GridCell>\n                        ) : null}\n                    </Grid>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    error: selectors.getQuizError(state),\n    waitForUsersCount: selectors.getWaitForUsersCount(state),\n    quizName: selectors.getQuizName(state),\n    isInProgress: selectors.getQuizIsInProgress(state),\n    isFinished: selectors.getQuizIsFinished(state),\n    isUnexpectedFinished: selectors.getQuizIsUnexpectedFinished(state),\n    activeQuestion: selectors.getActiveQuestion(state),\n    activeUsers: selectors.getActiveUsers(state),\n    jwtError: selectors.getJwtAuthenticatedError(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    joinQuizRequest: quizId => dispatch(actions.joinQuizRequest(quizId)),\n    leaveQuizRequest: quizId => dispatch(actions.leaveQuizRequest(quizId)),\n    answerQuestionRequest: params =>\n        dispatch(actions.answerQuestionRequest(params))\n});\n\nconst ConnectedQuiz = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(Quiz)\n);\n\nexport default ConnectedQuiz;\n","import React, { Component } from \"react\";\nimport QuizContainer from \"../containers/Quiz\";\nimport { Theme } from \"rmwc\";\n\nexport default class Quiz extends Component {\n    render() {\n        const { quizId } = this.props.match.params;\n        return (\n            <Theme tag=\"main\" use=\"primary-bg on-primary\">\n                <QuizContainer quizId={quizId} />\n            </Theme>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Header from \"../containers/Header\";\nimport { Theme, TopAppBarFixedAdjust } from \"rmwc\";\nimport { CircularProgress } from \"@rmwc/circular-progress\";\nimport \"@rmwc/circular-progress/circular-progress.css\";\n\nexport default class Signup extends Component {\n    render() {\n        return (\n            <Theme tag=\"main\">\n                <Header />\n                <TopAppBarFixedAdjust />\n                <div className=\"page\">\n                    <div className=\"container\">\n                        <CircularProgress size=\"xlarge\" />\n                    </div>\n                </div>\n            </Theme>\n        );\n    }\n}\n","import React from \"react\";\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport selectors from \"../redux/selectors\";\nimport Loading from \"../pages/Loading\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport ApplicationService from \"../services/ApplicationService\";\n\nclass Locked extends Component {\n    static propTypes = {\n        isAuthenticated: PropTypes.bool.isRequired\n    };\n\n    componentDidMount() {\n        ApplicationService.authenticateUser().then(response => {\n            if (!response.isAuthenticated) {\n                this.props.history.push(\"/\");\n            }\n        });\n    }\n\n    render() {\n        return this.props.isAuthenticated ? this.props.children : <Loading />;\n    }\n}\n\nconst mapStateToProps = state => ({\n    isAuthenticated: selectors.getIsAuthenticated(state)\n});\n\nconst ConnectedLocked = withRouter(connect(mapStateToProps)(Locked));\n\nexport default ConnectedLocked;\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport actions from \"../redux/actions\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n    static propTypes = {\n        authenticateUser: PropTypes.func.isRequired\n    };\n\n    componentDidMount() {\n        this.props.authenticateUser();\n    }\n\n    render() {\n        return this.props.children;\n    }\n}\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = {\n    authenticateUser: actions.authenticateUser\n};\n\nconst ConnectedApp = withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(App)\n);\n\nexport default ConnectedApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store/configureStore\";\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Switch,\n    Redirect\n} from \"react-router-dom\";\n\nimport Homepage from \"./pages/Homepage\";\nimport Dashboard from \"./pages/Dashboard\";\nimport Leaderboard from \"./pages/Pointsboard\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport About from \"./pages/About\";\nimport Quiz from \"./pages/Quiz\";\nimport Locked from \"./containers/Locked\";\nimport App from \"./containers/App\";\n\nimport { RMWCProvider, ThemeProvider } from \"rmwc\";\nimport \"./styles/app.css\";\n\nReactDOM.render(\n    <RMWCProvider>\n        <ThemeProvider\n            options={{\n                primary: \"#6200ee\",\n                secondary: \"#03dac4\",\n                error: \"#b00020\"\n            }}\n        >\n            <Provider store={store}>\n                <Router>\n                    <App>\n                        <Switch>\n                            <Route exact path=\"/\" component={Homepage} />\n                            <Route exact path=\"/sign-up\" component={Signup} />\n                            <Route exact path=\"/login\" component={Login} />\n                            <Route exact path=\"/about\" component={About} />\n                            <Locked>\n                                <Switch>\n                                    <Route\n                                        exact\n                                        path=\"/leaderboard\"\n                                        component={Leaderboard}\n                                    />\n                                    <Route\n                                        exact\n                                        path=\"/dashboard\"\n                                        component={Dashboard}\n                                    />\n                                    <Route\n                                        exact\n                                        path=\"/play/:quizId\"\n                                        component={Quiz}\n                                    />\n                                    <Redirect to=\"/\" />\n                                </Switch>\n                            </Locked>\n                        </Switch>\n                    </App>\n                </Router>\n            </Provider>\n        </ThemeProvider>\n    </RMWCProvider>,\n    document.getElementById(\"root\")\n);\n","switch (process.env.NODE_ENV) {\n    case \"production\": {\n        module.exports = require(\"./config_prod\");\n        break;\n    }\n    default: {\n        module.exports = require(\"./config_dev\");\n    }\n}\n","module.exports = {\n    WEB_SOCKET_URL: window.location.origin.replace(/^http/, \"ws\")\n};\n","module.exports = {\n    WEB_SOCKET_URL: \"ws://localhost:3000\"\n};\n"],"sourceRoot":""}